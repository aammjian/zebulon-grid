{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"dr",
				"direction"
			],
			[
				"ha",
				"hasScrollBar"
			],
			[
				"scro",
				"scrollbarsWidth"
			],
			[
				"he",
				"headers"
			],
			[
				"columns",
				"columnStartIndex"
			],
			[
				"col",
				"columnHeadersHeightSelector"
			],
			[
				"rowH",
				"rowHeadersWidthSelector"
			],
			[
				"cr",
				"crossSize"
			],
			[
				"get",
				"getRowHeaders"
			],
			[
				"MEA",
				"MEASURE_ID"
			],
			[
				"dim",
				"dimensions"
			],
			[
				"coll",
				"collapseOffset"
			],
			[
				"head",
				"headersLenght"
			],
			[
				"cl",
				"className"
			],
			[
				"Ax",
				"AxisType"
			],
			[
				"shift",
				"shiftKey"
			],
			[
				"han",
				"handleDoubleClick"
			],
			[
				"handle",
				"handleDoubleClick"
			],
			[
				"cells",
				"cellsRenderer"
			],
			[
				"scroll",
				"scrollToRow"
			],
			[
				"columnIn",
				"columnIncrement"
			],
			[
				"s",
				"scrollbarSizes"
			],
			[
				"i",
				"innerSize"
			],
			[
				"column",
				"columnStartIndex"
			],
			[
				"root",
				"ROOT_ID"
			],
			[
				"la",
				"columnLastIndex"
			],
			[
				"pos",
				"positionRatio"
			],
			[
				"inn",
				"innerSize"
			],
			[
				"in",
				"innerStyle"
			],
			[
				"ro",
				"rowSize"
			],
			[
				"scr",
				"scrollToColumn"
			],
			[
				"scrol",
				"scrollToRow"
			],
			[
				"colu",
				"columnCount"
			],
			[
				"cro",
				"crossSize"
			],
			[
				"sta",
				"startIndex"
			],
			[
				"scoll",
				"scrollEnd"
			],
			[
				"sco",
				"scrollEnd"
			],
			[
				"is",
				"isScrolling"
			],
			[
				"rost",
				"rowStopIndex"
			],
			[
				"m",
				"mainSize"
			],
			[
				"dept",
				"depthInfo"
			],
			[
				"roo",
				"rootIndex"
			],
			[
				"headerR",
				"headersRenderer"
			],
			[
				"headerC",
				"headerCells"
			],
			[
				"le",
				"length"
			],
			[
				"a",
				"axisType"
			],
			[
				"filter",
				"filterKeys"
			],
			[
				"sc",
				"scrollToColumn"
			],
			[
				"F",
				"FETCH_DATA"
			],
			[
				"act",
				"activeMeasures"
			],
			[
				"mea",
				"measureId"
			],
			[
				"move",
				"moveMeasure"
			],
			[
				"me",
				"measuresCount"
			],
			[
				"M",
				"MOVE_MEASURE"
			],
			[
				"zoom",
				"zoomValue"
			],
			[
				"fe",
				"fetchFail"
			],
			[
				"ba",
				"basicConfig2"
			],
			[
				"config",
				"configFunctions"
			],
			[
				"ext",
				"externalFunction"
			],
			[
				"aggr",
				"aggregations"
			],
			[
				"conf",
				"configFunctions"
			],
			[
				"ag",
				"aggregations"
			],
			[
				"custom",
				"customFunctions"
			],
			[
				"EXP",
				"EXPAND_COLLAPSE_ALL"
			],
			[
				"collapse",
				"collapseAll"
			],
			[
				"fon",
				"font-weight"
			],
			[
				"c",
				"caption"
			],
			[
				"di",
				"dimension"
			],
			[
				"gr",
				"gridId"
			],
			[
				"filte",
				"filterKeys"
			],
			[
				"filt",
				"filterKeys"
			],
			[
				"fil",
				"filteredMap"
			],
			[
				"che",
				"checked"
			],
			[
				"isn",
				"isNotFiltered"
			],
			[
				"ch",
				"checkedValues"
			],
			[
				"sele",
				"selectedRange"
			],
			[
				"rowS",
				"rowStopIndex"
			],
			[
				"dimensionV",
				"dimensionValuesSelector"
			],
			[
				"dime",
				"dimensionId"
			],
			[
				"pro",
				"props"
			],
			[
				"tog",
				"toggleMeasure"
			],
			[
				"sor",
				"sortDirection"
			],
			[
				"so",
				"sortDirection"
			],
			[
				"to",
				"toggleMeasure"
			],
			[
				"av",
				"availableMeasuresSelector"
			],
			[
				"Z",
				"ZOOM_OUT"
			],
			[
				"z",
				"zoomOut"
			],
			[
				"zoo",
				"zoomIn"
			],
			[
				"scrollT",
				"scrollToColumn"
			],
			[
				"row",
				"rowIndex"
			],
			[
				"H",
				"HeaderType"
			],
			[
				"React",
				"ReactContextMenu"
			],
			[
				"ex",
				"expect"
			],
			[
				"exe",
				"expect"
			],
			[
				"ax",
				"axisTree"
			],
			[
				"build",
				"buildAxisHeaders"
			],
			[
				"measu",
				"measureHeadersAxis"
			],
			[
				"meas",
				"measures"
			],
			[
				"bo",
				"border"
			],
			[
				"focus",
				"focusedCell"
			],
			[
				"collect",
				"collectMenu"
			],
			[
				"h",
				"handleMouseDown"
			],
			[
				"hea",
				"header"
			],
			[
				"dimensio",
				"dimensions"
			],
			[
				"drag",
				"dragSourceCollect"
			],
			[
				"C",
				"ConnectedMenu"
			],
			[
				"ne",
				"newPosition"
			],
			[
				"D",
				"DIMENSION"
			],
			[
				"posi",
				"positionStyle"
			],
			[
				"header",
				"headerLeaves"
			],
			[
				"isA",
				"isAffixManaged"
			],
			[
				"las",
				"lastChildSize"
			],
			[
				"style",
				"positionStyle"
			],
			[
				"RO",
				"ROWS"
			],
			[
				"colum",
				"columnCrossPositions"
			],
			[
				"n",
				"newAxis"
			],
			[
				"R",
				"ROOT_ID"
			],
			[
				"mo",
				"moveIndex"
			],
			[
				"Dr",
				"DropTarget"
			],
			[
				"isNul",
				"isNullOrUndefined"
			],
			[
				"id",
				"id"
			],
			[
				"cu",
				"currentDimension"
			],
			[
				"Sel",
				"selectRange"
			],
			[
				"se",
				"selectRange"
			],
			[
				"sle",
				"selectedCellEnd"
			],
			[
				"sel",
				"selectRange"
			],
			[
				"hande",
				"handleMouseOver"
			],
			[
				"handl",
				"handleMouseDown"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/pivotGrid/components/DataCells/DataCells.js",
			"settings":
			{
				"buffer_size": 15172,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/pivotGrid/selectors/headers.selector.js",
			"settings":
			{
				"buffer_size": 8864,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/pivotGrid/actions/selection.action.js",
			"settings":
			{
				"buffer_size": 430,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "import React, { Component } from \"react\";\n\nimport { DropTarget } from \"react-dnd\";\nimport { connectMenu } from \"react-contextmenu\";\nimport ContextMenu from \"../ContextMenu/ContextMenu\";\n\n// import ArrowKeyStepper from '../../containers/ArrowKeyStepper';\nimport DataCells from \"../../containers/DataCells\";\nimport DimensionHeaders from \"../../containers/DimensionHeaders\";\nimport ColumnHeaders from \"../../containers/ColumnHeaders\";\nimport RowHeaders from \"../../containers/RowHeaders\";\n// import DragLayer from \"./DragLayer\";\nimport { isEmpty } from \"../../utils/generic\";\nimport { ZOOM_IN, ZOOM_OUT } from \"../../constants\";\n// import * as actions from '../../actions';\n// ------------------------------------------\n// CONCEPTS\n// ------------------------------------------\n// The pivot grid is build using a dataset (as an array of data rows) and a meta description(configuration) of the data set\n// most of the configuration can be determined from the dataset, nevertheless\n// - MEASURE:\n// measures are the descriptions for available computed (aggregated) values displayed into the grid\n// measures properties are\n//    - id\n//    - label\n//    - aggregation function\n//    - data accessor\n//    - format\n//  measures together can be restituted in rows or columns\n// - DIMENSION:\n//  dimensions are the descriptions of the axes used to determine the perimeter of the calculation of the measures (group by)\n// dimension properties are:\n//    - id\n//    - label\n//    - id accessor\n//    - label accessor\n//    - sort accessor\n//    - format\n//    - parent dimension for 'attributes'\n//      attributes are additional properties of a dimension with (0,1) cardinality (person -> gender, age, nationality...) ,g\n//      it will be possible to expand/collapse those attributes\n//  any dimension can be restituted either in row nor in column\n//  filters can be defined on the dimension and will be applied to the dataset\n// in a 'SQL like' expression you may represent the result of your configuration as something like:\n// select\n//        measure1.aggregation_function(measure1.data_accessor),\n//        measure2.aggregation_function(measure2.data_accessor)\n// from   dataset\n// where  dimension3.filter_function()\n// group by\n//        dimension1.id_accessor,dimension1.label_accessor in row,\n//        dimension2.id_accessor,dimension2.label_accessor in row,\n//        dimension3.id_accessor,dimension3.label_accessor in column\n// order by\n//        dimension1.sort_accessor,dimension2.sort_accessor\n// ------------------------------------------\n// PIVOT GRID\n// ------------------------------------------\n// pivot grid is the main component is the main component\n// it is decomposed in 4 different parts\n// - the data cells grid where the measures aggregation calculations are displayed\n// this is a virtualised grid in rows and columns with standards navigation, selection, copy... functionalities\n// - the row headers grid\n// this is a virtualised grid in rows, synchronized in rows with the the datacells grid that display,\n// as a tree the successive dimensions values (for in row dimensions)\n// this is a virtualised grid in columns, synchronized in columns with the the datacells grid that display,\n// as a tree the successive dimensions values (for in column dimensions)\n// - the dimension headers grid that will display the captions of dimensions in rows and columns\n// most of changes of the pivot grid configuration are available there (dimension  moves, sort...)\n// const Checkbox = ({ onChange, checked, key, label, index, style }) =>\n//   <div style={{ ...style, textAlign: 'left' }}>\n//     <label>\n//       <input\n//         type=\"checkbox\"\n//         value={label}\n//         onChange={onChange}\n//         checked={checked || false}\n//       />\n//       {label}\n//     </label>\n//   </div>;\n\nclass PivotGrid extends Component {\n  constructor(props) {\n    super(props);\n    this.scrollbarWidth = 12;\n    const scroll = {\n      rows: { index: 0, direction: 1, cells: [] },\n      columns: { index: 0, direction: 1, cells: [] }\n    };\n    this.state = { ...scroll, scroll };\n\n    //   rows: props.getRowHeaders(props.height, { index: 0, direction: 1 }),\n    //   columns: props.getColumnHeaders(props.width, { index: 0, direction: 1 })\n    // };\n    // this.focusCellKeys = [];\n    // this.handleScrollToChange = this.handleScrollToChange.bind(this);\n    // this.handleKeyDown = this.handleKeyDown.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"copy\", this.handleCopy);\n  }\n\n  componentDidUnMount() {\n    document.removeEventListener(\"copy\", this.handleCopy);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    console.log(\n      \"componentWillReceiveProps\",\n      this.props.getRowHeaders !== nextProps.getRowHeaders,\n      this.props.getColumnHeaders !== nextProps.getColumnHeaders,\n      this.props.height !== nextProps.height,\n      this.props.width !== nextProps.width\n    );\n    const state = {};\n    let change = false;\n    if (\n      this.props.getRowHeaders !== nextProps.getRowHeaders ||\n      this.props.height !== nextProps.height\n    ) {\n      state.rows = nextProps.getRowHeaders(\n        nextProps.height - nextProps.columnHeadersHeight,\n        this.state.scroll.rows\n      );\n      change = true;\n    } else {\n      state.rows = this.state.rows;\n    }\n    if (\n      this.props.getColumnHeaders !== nextProps.getColumnHeaders ||\n      this.props.width !== nextProps.width\n    ) {\n      state.columns = nextProps.getColumnHeaders(\n        nextProps.width - nextProps.rowHeadersWidth,\n        this.state.scroll.columns\n      );\n      change = true;\n    } else {\n      state.columns = this.state.columns;\n    }\n    if (change) {\n      this.computeGrid(state);\n      this.setState(state);\n    }\n    // let nextScrollToRow;\n    // let nextScrollColumn;\n    // const current = {};\n    // const next = {};\n    // if (this.props.focusCells !== nextProps.focusCells) {\n    //   this.focusCellKeys = nextProps.focusCells.map(cell =>\n    //     getCellInfosSelectorKey(cell)\n    //   );\n    //   if (this.focusCellKeys.length > 0) {\n    //     nextScrollColumn = keyToIndex(\n    //       nextProps.columnHeaders,\n    //       this.focusCellKeys[0].columns\n    //     );\n    //     nextScrollToRow = keyToIndex(\n    //       nextProps.rowHeaders,\n    //       this.focusCellKeys[0].rows\n    //     );\n    //   }\n    // } else {\n\n    // // Update row and column indexes to make sure the same header stay in view when toggling measure or filtering\n    // current.dataDimensionsCount = this.props.dataDimensionsCount;\n    // next.dataDimensionsCount = nextProps.dataDimensionsCount;\n    // if (this.props.layout.rowVerticalCount !== nextProps.layout.rowVerticalCount) {\n    //   console.log('updating row start index');\n    //   current.dimensions = this.props.rowDimensions;\n    //   next.dimensions = nextProps.rowDimensions;\n    //   current.firstHeaderRow = this.props.rowHeaders[this.scrollToRow];\n    //   const nextFirstHeaderKey = getNextKey(current, next);\n    //   nextScrollToRow = keyToIndex(nextProps.rowHeaders, nextFirstHeaderKey);\n    // }\n    // if (this.props.columnHeaders.length !== nextProps.columnHeaders.length) {\n    //   console.log('updating column start index');\n    //   current.dimensions = this.props.columnDimensions;\n    //   next.dimensions = nextProps.columnDimensions;\n    //   current.firstHeaderRow = this.props.columnHeaders[this.columnStartIndex];\n    //   const nextFirstHeaderKey = getNextKey(current, next);\n    //   nextScrollColumn = keyToIndex(\n    //     nextProps.columnHeaders,\n    //     nextFirstHeaderKey\n    //   );\n    // }\n    // }\n    // // If keyToIndex does not find the key in the headers, it returns -1\n    // // In this case, do nothing\n    // if (nextScrollToRow >= 0) this.scrollToRow = nextScrollToRow;\n    // if (nextScrollColumn >= 0) this.columnStartIndex = nextScrollColumn;\n    if (!isEmpty(nextProps.selectedRange.focusedCell)) {\n      this.scrollToRow =\n        nextProps.selectedRange.focusedCell.rowIndex || this.scrollToRow;\n      this.scrollToColumn =\n        nextProps.selectedRange.focusedCell.columnIndex || this.scrollToColumn;\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { height, width, setSizes } = this.props;\n    if (height !== prevProps.height || width !== prevProps.width) {\n      setSizes({ height, width });\n    }\n    this.scrollChange = false;\n  }\n  computeGrid = (rows,columns) => {\n    if (\n      grid.rows &&\n      grid.columns &&\n      ((grid.rows.hasScrollbar && !grid.columns.hasScrollbar) ||\n        (!grid.rows.hasScrollbar && grid.columns.hasScrollbar))\n    ) {\n      if (\n        grid.rows.hasScrollbar &&\n        grid.columns.size + this.scrollbarWidth > grid.columns.maxSize\n      ) {\n        grid.columns.hasScrollbar = true;\n      } else if (\n        grid.columns.hasScrollbar &&\n        grid.rows.size + this.scrollbarWidth > grid.rows.maxSize\n      ) {\n        grid.rows.hasScrollbar = true;\n      }\n    }\n  };\n  handleCopy = () => {\n    if (\n      // Works only if the grid is focused\n      this.modifierKeyIsPressed\n    ) {\n      this.props.copy();\n    }\n  };\n\n  handleKeyDown = e => {\n    // const { columnHorizontalCount, rowVerticalCount } = this.props.layout;\n    this.modifierKeyIsPressed = e.ctrlKey || e.metaKey;\n    // this.shiftKeyIsPressed = e.shiftKey;\n    if (e.metaKey || e.ctrlKey) {\n      // To be consistent with browser behaviour, we also accept = which is on the same keyboard touch as +\n      if (e.key === \"+\" || e.key === \"=\") {\n        this.props.zoom(ZOOM_IN);\n\n        e.preventDefault();\n      }\n      // ctrl - -> zoom out\n      // To be consistent with browser behaviour, we also accept _ which is on the same keyboard touch as -\n      if (e.key === \"-\" || e.key === \"_\") {\n        this.props.zoom(ZOOM_OUT);\n        e.preventDefault();\n      }\n    }\n  };\n  // handleKeyUp = e => {\n  //   if (e.which === 17) {\n  //     this.modifierKeyIsPressed = false;\n  //   }\n  //   if (e.which === 16) {\n  //     this.shiftKeyIsPressed = false;\n  //   }\n  // };\n\n  // handleScrollToChange = ({ scrollToColumn, scrollToRow }) => {\n  //   const selectedRange = this.props.selectedRange;\n  //   if (this.shiftKeyIsPressed) {\n  //     // after column selection\n  //     if (isNull(selectedRange.focusedCell.rowIndex)) {\n  //       const columnIndex =\n  //         selectedRange.selectedCellEnd.columnIndex +\n  //         (scrollToColumn > this.scrollToColumn ? 1 : -1);\n  //       this.props.selectRange({\n  //         selectedCellEnd: {\n  //           columnIndex,\n  //           rowIndex: selectedRange.selectedCellEnd.rowIndex\n  //         },\n  //         focusedCell: { columnIndex, rowIndex: null }\n  //       });\n  //     } else if (isNull(selectedRange.focusedCell.columnIndex)) {\n  //       // after row  selection\n  //       const rowIndex =\n  //         selectedRange.selectedCellEnd.rowIndex +\n  //         (scrollToRow > this.scrollToRow ? 1 : -1);\n  //       this.props.selectRange({\n  //         selectedCellEnd: {\n  //           rowIndex,\n  //           columnIndex: selectedRange.selectedCellEnd.columnIndex\n  //         },\n  //         focusedCell: { rowIndex, columnIndex: null }\n  //       });\n  //     } else {\n  //       this.props.selectRange({\n  //         selectedCellEnd: {\n  //           columnIndex: scrollToColumn,\n  //           rowIndex: scrollToRow\n  //         },\n  //         focusedCell: { columnIndex: scrollToColumn, rowIndex: scrollToRow }\n  //       });\n  //     }\n  //   } else {\n  //     this.props.selectCell({\n  //       columnIndex: scrollToColumn,\n  //       rowIndex: scrollToRow\n  //     });\n  //   }\n\n  //   this.scrollChange = !(\n  //     this.scrollToRow === scrollToRow && this.scrollToColumn === scrollToColumn\n  //   );\n  //   this.scrollToRow = scrollToRow;\n  //   this.scrollToColumn = scrollToColumn;\n  // };\n  onScroll = (scrollToRow, scrollToColumn) => {\n    let { rows, columns } = this.state;\n    if (\n      scrollToRow !== null &&\n      (scrollToRow.index !== rows.index ||\n        scrollToRow.direction !== rows.direction)\n    ) {\n      this.props.scrollToRow(scrollToRow);\n    }\n    if (\n      scrollToColumn !== null &&\n      (scrollToColumn.index !== columns.index ||\n        scrollToColumn.direction !== columns.direction)\n    ) {\n      this.props.scrollToColumn(scrollToColumn);\n      // columns = getColumnHeaders(width - rowHeadersWidth, scrollToColumn);\n    }\n    // this.setState({\n    //   rows,\n    //   columns\n    // });\n  };\n\n  render() {\n    const {\n      connectDropTarget,\n      height,\n      width,\n      columnHeadersHeight,\n      rowHeadersWidth,\n\n      // layout,\n      // customFunctions,\n      drilldown,\n      zoomValue,\n      id: gridId\n    } = this.props;\n    const scrollbarsWidth = {\n      horizontal: this.scrollbarWidth * (this.state.columns.hasScrollbar || 0),\n      vertical: this.scrollbarWidth * (this.state.rows.hasScrollbar || 0)\n    };\n    // const { columnHorizontalCount, rowVerticalCount } = layout;\n    let grid;\n    if (this.props.status.loading) {\n      grid = <div>Loading data...</div>;\n    } else if (this.props.status.error) {\n      if (this.props.status.error.message === \"No rows retrieved\") {\n        grid = <div style={{ width: \"max-content\" }}>No rows retrieved</div>;\n      } else {\n        grid = (\n          <div style={{ color: \"red\", width: \"max-content\" }}>\n            <p>{this.props.status.error.type}</p>\n            <p>{this.props.status.error.message}</p>\n          </div>\n        );\n      }\n    } else {\n      const ConnectedMenu = connectMenu(`context-menu-${gridId}`)(ContextMenu);\n      grid = connectDropTarget(\n        // Width has to be set in order to render correctly in a resizable box\n        // Position must be relative so that the absolutely positioned DragLayer behaves correctly\n        <div\n          style={{ width, position: \"relative\" }}\n          onKeyDown={this.handleKeyDown}\n        >\n          <div\n            className=\"zebulon-grid-zebulon-grid\"\n            style={{ fontSize: `${zoomValue * 100}%` }}\n          >\n            <div style={{ display: \"flex\" }}>\n              <DimensionHeaders gridId={gridId} />\n              <ColumnHeaders\n                gridId={gridId}\n                rows={null}\n                columns={this.state.columns}\n                height={columnHeadersHeight}\n                width={width - rowHeadersWidth - scrollbarsWidth.vertical}\n              />\n            </div>\n            <div style={{ display: \"flex\" }}>\n              <RowHeaders\n                gridId={gridId}\n                rows={this.state.rows}\n                columns={null}\n                height={\n                  height - columnHeadersHeight - scrollbarsWidth.horizontal\n                }\n                width={rowHeadersWidth}\n              />\n              <DataCells\n                drilldown={drilldown}\n                menuFunctions={this.props.menuFunctions}\n                rows={this.state.rows}\n                columns={this.state.columns}\n                gridId={gridId}\n                height={height - columnHeadersHeight}\n                width={width - rowHeadersWidth}\n                scrollbarsWidth={scrollbarsWidth}\n                onScroll={this.onScroll}\n              />\n            </div>\n            <ConnectedMenu />\n          </div>\n        </div>\n      );\n    }\n    return grid;\n  }\n}\n\nconst gridSpec = {\n  drop(props, monitor, component) {\n    const handle = monitor.getItem();\n    const initialOffset = monitor.getInitialClientOffset();\n    const offset = monitor.getClientOffset();\n    component.props.updateCellSize({ handle, offset, initialOffset });\n  }\n};\n\nconst collect = connect => ({\n  connectDropTarget: connect.dropTarget()\n});\n\nPivotGrid.defaultProps = { id: 0 };\n// expose all actions\n// Object.keys(actions).forEach(action => {\n//   /* eslint-disable func-names */\n//   PivotGrid.prototype[action] = function(...args) {\n//     this.state.store.dispatch(actions[action](...args));\n//   };\n//   /* eslint-enable */\n// });\n// Add grid id to the type to ensure only correct drop target is used\nexport default DropTarget(\n  props => `cell-resize-handle--${props.id || 0}`,\n  gridSpec,\n  collect\n)(PivotGrid);\n/*\n       <div\n          style={{ width, position: \"relative\" }}\n          onKeyDown={this.handleKeyDown}\n          // onKeyUp={this.handleKeyUp}\n        >\n          <div\n            className=\"zebulon-grid-zebulon-grid\"\n            style={{ fontSize: `${zoomValue * 100}%` }}\n          >\n            <div style={{ display: \"flex\" }}>\n              <DimensionHeaders gridId={gridId} />\n              <ColumnHeaders\n                gridId={gridId}\n                scrollToColumn={this.state.scrollToColumn}\n                scrollToRow={null}\n              />\n            </div>\n            <div style={{ display: \"flex\" }}>\n              <RowHeaders\n                gridId={gridId}\n                scrollToColumn={null}\n                scrollToRow={this.state.scrollToRow}\n              />\n              <DataCells\n                drilldown={drilldown}\n                menuFunctions={this.props.menuFunctions}\n                onScroll={this.onScroll}\n                gridId={gridId}\n              />\n            </div>\n            <ConnectedMenu />\n          </div>\n        </div>\n */\n",
			"file": "src/pivotGrid/components/PivotGrid/PivotGrid.js",
			"file_size": 17734,
			"file_write_time": 131520256885108508,
			"settings":
			{
				"buffer_size": 17257,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/pivotGrid/containers/PivotGrid.js",
			"settings":
			{
				"buffer_size": 2270,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/pivotGrid/constants/index.js",
			"settings":
			{
				"buffer_size": 2196,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/pivotGrid/reducers/selection.reducer.js",
			"settings":
			{
				"buffer_size": 862,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/pivotGrid/components/DataCell/DataCell.js",
			"settings":
			{
				"buffer_size": 2170,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/pivotGrid/components/DataCells/ScrollBar.js",
			"settings":
			{
				"buffer_size": 6575,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 129.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"lint",
				"SublimeLinter: Lint This View"
			],
			[
				"packins",
				"Package Control: Install Package"
			],
			[
				"packre",
				"Package Control: Remove Package"
			],
			[
				"list pa",
				"Package Control: List Packages"
			],
			[
				"sor",
				"Sort Lines"
			],
			[
				"esl",
				"ESLint"
			],
			[
				"instp",
				"Package Control: Install Package"
			],
			[
				"sesyjava",
				"Set Syntax: JavaScript"
			],
			[
				"in",
				"Indentation: Convert to Tabs"
			],
			[
				"pains",
				"Package Control: Install Package"
			],
			[
				"user",
				"Preferences: Settings - User"
			],
			[
				"lis",
				"Package Control: List Packages"
			],
			[
				"togsi",
				"View: Toggle Open Files in Side Bar"
			],
			[
				"jso",
				"Set Syntax: JSON"
			],
			[
				"tofo",
				"TodoReview: Open Files"
			],
			[
				"inp",
				"Package Control: Install Package"
			],
			[
				"tabe",
				"Table Editor: Enable for current view"
			],
			[
				"insp",
				"Package Control: Install Package"
			],
			[
				"omn",
				"OmniMarkupPreviewer: Preview Current Markup in Browser"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"stcre",
				"Set Syntax: Creole"
			],
			[
				"pacip",
				"Package Control: Install Package"
			],
			[
				"packcip",
				"Package Control: Install Package"
			],
			[
				"togls",
				"View: Toggle Open Files in Side Bar"
			],
			[
				"setsyoc",
				"Set Syntax: Objective-C"
			],
			[
				"toglmim",
				"View: Toggle Minimap"
			]
		],
		"width": 736.0
	},
	"console":
	{
		"height": 459.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/thomas/dev_js/grid",
		"/C/Users/thomas/dev_js/grid/src",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/components",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/components/ContextMenu",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/components/DataCells",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/components/Header",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/components/Headers",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/components/InnerHeader",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/components/ResizeHandle",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/constants",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/containers",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/selectors"
	],
	"file_history":
	[
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/selectors/axis.selector.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/selectors/headers.selector.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/components/DimensionHeaders/DimensionHeaders.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/components/Headers/Headers.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/components/DataCell/DataCell.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/components/Header/Header.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/selectors/data.selector.js",
		"/C/Users/thomas/dev_js/grid/src/PivotGrid.demo.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/components/PivotGrid/PivotGrid.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/reducers/collapses.reducer.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/reducers/dimensions.reducer.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/reducers/config.reducer.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/reducers/data.reducer.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/reducers/filters.reducer.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/reducers/measures.reducer.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/constants/index.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/reducers/status.reducer.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/actions/filter.action.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/actions/config.action.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/containers/PivotGrid.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/containers/Filter.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/containers/DimensionHeaders.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/containers/DataCells.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/containers/ColumnHeaders.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/containers/RowHeaders.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/actions/config.action.test.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/selectors/data.selector.test.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/components/DataCells/DataCells.js",
		"/C/Users/thomas/dev_js/grid/src/utils/mock.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/actions/collapses.action.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/utils/headers.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/components/DimensionHeader/DimensionHeader.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/utils/configuration.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/selectors/selection.selector.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/selectors/cellSizes.selector.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/selectors/sizes.selector.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/components/InnerHeader/InnerHeader.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/components/DataCells/ScrollBar.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/components/ResizeHandle/ResizeHandle.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/components/Filter/Filter.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/index.css",
		"/C/Users/thomas/dev_js/grid/src/utils/menuFunctions.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/ZebulonGrid.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/selectors/index.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/components/ContextMenu/ContextMenu.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/components/PivotGrid/DragLayer.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/utils/scrollbarSize.js",
		"/C/Users/thomas/dev_js/grid/src/ZebulonGrid.demo.js",
		"/C/Users/thomas/dev_js/client/package.json",
		"/C/Users/thomas/dev_js/grid/package.json",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/selectors/dimensions.selector.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/components/DataCells/DataCells2.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/components/Headers/Headers2.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/actions/selection.action.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/reducers/selection.reducer.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/components/Headers/Headers o.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/utils/filtering.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/utils/aggregation.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/reducers/filters.reducer.test.js",
		"/C/Users/thomas/dev_js/grid/node_modules o/ajv/dist/ajv.min.js.map",
		"/C/Users/thomas/dev_js/grid/node_modules o/react-virtualized/CHANGELOG.md",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/reducers/index.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/selectors/cell.selector.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/reducers/sizes.reducer.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/actions/sizes.action.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/index.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/reducers/axis.reducer.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/actions/data.action.js",
		"/C/Users/thomas/dev_js/grid/grid.sublime-project",
		"/C/Users/thomas/dev_js/package/package.json",
		"/C/Users/thomas/dev_js/grid/src/App.js",
		"/C/Users/thomas/dev_js/grid/.gitignore",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/utils/generic.js",
		"/C/Users/thomas/dev_js/grid/package.json0",
		"/C/Users/thomas/AppData/Local/Temp/tmpCD13.tmp.json",
		"/C/Users/thomas/dev_js/grid/npm-debug.log",
		"/C/Users/thomas/AppData/Local/Temp/tmp5B00.tmp.json",
		"/C/Users/thomas/AppData/Local/Temp/tmpDE75.tmp.json",
		"/C/Users/thomas/dev_js/client/node_modules/zebulon-grid/lib/index.css",
		"/C/Users/thomas/AppData/Roaming/Sublime Text 3/Packages/User/JsPrettier.sublime-settings",
		"/C/Users/thomas/AppData/Roaming/Sublime Text 3/Packages/JsPrettier/JsPrettier.sublime-settings",
		"/C/Users/thomas/AppData/Roaming/Sublime Text 3/Packages/JsPrettier/CHANGELOG.md",
		"/C/Users/thomas/dev_js/grid/lib/index.css",
		"/C/Users/thomas/dev_js/grid/node_modules/react-contextmenu/public/styles.5bb557.css",
		"/C/Users/thomas/dev_js/client/node_modules/zebulon-grid/lib/components/PivotGrid/PivotGrid.js",
		"/C/Users/thomas/dev_js/client/node_modules/zebulon-grid/lib/containers/PivotGrid.js",
		"/C/Users/thomas/dev_js/grid/src/index.css",
		"/C/Users/thomas/dev_js/grid/debug.log",
		"/C/Users/thomas/dev_js/grid/lib/utils/configuration.js",
		"/C/Users/thomas/dev_js/client/src/controls/MenuTrigger/MenuTrigger.js",
		"/C/Users/thomas/dev_js/client/src/controls/Menu/Menu.js",
		"/C/Users/thomas/dev_js/grid/src/utils/externalFunctions.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/utils/setConfig.js",
		"/C/Users/thomas/dev_js/webserver/utils/zebulon/interface.js",
		"/C/Users/thomas/dev_js/grid/src/utils/configFunctions.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/reducers/data.reducer.test.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/actions/data.action.test.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/components/PivotGrid/../../ZebulonGrid.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/components/PivotGrid/ZebulonGrid.js",
		"/C/Users/thomas/dev_js/grid/src/App.test.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/ZebulonGrid.test.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/setConfig.js",
		"/C/Users/thomas/dev_js/grid/.npmignore",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/__snapshots__/WrappedGrid.test.js.snap",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/actions/dimension.action.js",
		"/C/Users/thomas/dev_js/grid/src/WrappedGrid.demo.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/WrappedGrid.js",
		"/C/Users/thomas/dev_js/grid/specs/drilldownInterface.spec.md",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/components/Forms/Filter.js",
		"/C/Users/thomas/dev_js/grid/src/index.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/selectors/cell.selector.test.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/hydrateStore.js",
		"/C/Users/thomas/dev_js/grid/src/utils/29cba081-9fb3-4080-9721-108d7a24d6fd.dmp",
		"/C/Users/thomas/dev_js/grid/src/utils/Format.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/Aggregation.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/services/copyService.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/selectors/axis.selector.test.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/Filtering.js",
		"/C/Users/thomas/dev_js/grid/lib/commonjs/index.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/selectors/collapses.selector.js",
		"/C/Users/thomas/AppData/Roaming/Sublime Text 3/Packages/ESLint/ESLint.sublime-settings",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/selectors/sizes.selector.test.js",
		"/C/Users/thomas/dev_js/grid/config/env.js",
		"/C/Users/thomas/dev_js/grid/public/index.html",
		"/C/Users/thomas/dev_js/grid/LICENSE.txt",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/WrappedGrid.test.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/utils/keys.js",
		"/C/Users/thomas/dev_js/grid/src/pivotGrid/Axis.js"
	],
	"find":
	{
		"height": 52.0
	},
	"find_in_files":
	{
		"height": 134.0,
		"where_history":
		[
			"",
			".mkv.fx",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"grid.",
			"Row",
			"startSelect",
			"isAffixManaged",
			" cell.cell.",
			"rowIndex",
			"rows",
			"offset",
			"lastIndex",
			"latIndex",
			"cellRenderer",
			"hasScrollBar",
			"onScroll",
			"onScroll={this.onScroll}",
			"onScrll",
			"scrollTo",
			"rows",
			"computeGrid",
			"scroll.row",
			"columns",
			"isNotCollapsible",
			"isCollapsible",
			":",
			"case",
			"Rows",
			"rows",
			":",
			",",
			"mapDispatchToProps",
			"moveDimension",
			"SET_MEASURES",
			"onOk",
			"deleteFilter",
			"DELETE_FILTER",
			"moveDimension",
			"MOVE_DIMENSION",
			"SET_MEASURES",
			"fetchData",
			"FETCH_DATA",
			"filteredDataSelector",
			"data",
			"console",
			"isVisble",
			"buildHeaders",
			"isParentCollapsed",
			"this.props.",
			"this.props.columnHeaders",
			"                    ",
			"this.props.",
			"row",
			"columns",
			"getRowHeaders",
			"getLeaves",
			"getDimensionKeys",
			"toggleCollapse",
			"getDimensionKeysSelector",
			"expandCollapseAll",
			"toggleCollapse",
			"basicConfig",
			"applyConfigToStore",
			"mock",
			"span",
			"getLeaves",
			"SET_COLLAPSES",
			"setCollapses",
			"applyConfigToStore",
			"config",
			"headersLenght",
			"Index",
			"index",
			"Index",
			"index",
			"Index",
			"index",
			"selectedRangeSelector",
			"rowHeadersWidthSelector",
			"rows",
			"crossPositions",
			"crossPositionsSelector",
			"crossPositions",
			"crossPositionsSelector",
			"collapsedSizes",
			"ix",
			"offset",
			"if",
			"mock",
			"cross",
			"h.",
			"props",
			"mergeProps",
			"setSizes",
			"direction",
			"offset",
			"rows",
			"mock",
			"buildPositionedHeaders",
			"parentsSizes",
			"getLastDimension",
			"rowCells",
			"parentsSizes",
			"cells",
			"dimensions",
			"buildHeaders",
			"getNotCollapsedLeaf",
			"dataCellsHeightSelector",
			"rowHeadersWidthSelector",
			"crossPositionsSelector",
			"crossPositions",
			"axisType",
			"buildAxisPositionsHeaders",
			"data",
			"headerCells",
			"cellsRenderer",
			"scroll",
			"measuresCount",
			"collapsed",
			"startScroll",
			"Collapsed",
			"Sizes",
			"sizes",
			"Sizes",
			"sizes",
			"Sizes",
			"sizes",
			"Sizes",
			"sizes",
			"sizs",
			"getLeaves"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"hasScrollbar",
			"columnHeadersPositionsAndSizesSelector",
			"rowHeadersPositionsAndSizesSelector",
			"holdToDisplay={-1}",
			"FETCH_SUCCESS",
			"ZebulonGrid",
			"dimensionValuesSelector",
			"getLastChildHeightSelector",
			"getLastChildWidthSelector",
			"previewSizesSelector",
			"getLayoutSelector",
			"getCellInfosSelector",
			"getCellDimensionInfosSelector",
			"toggleSortOrder",
			"toggleCollapseDimension",
			"columnLeavesSelector",
			"rowLeavesSelector",
			"columnHeadersSelector",
			"rowHeadersSelector",
			"dataCellsWidthSelector",
			"dataCellsHeightSelector",
			"rowsVisibleHeightSelector",
			"columnsVisibleWidthSelector",
			"crossPositionsSelector",
			"activatedMeasuresSelector",
			"availableDimensionsSelector",
			"columnDimensionsSelector",
			"rowDimensionsSelector",
			"columnsWidthSelector",
			"columnHeadersWidthSelector",
			"rowHeadersWidthSelector",
			"columnsWidthsSelector",
			"rowsHeightSelector",
			"defaultCellSizesSelector",
			"getCrossPositions",
			"getCrossSize",
			"getRowsWidth",
			"getRowsHeight",
			"getColumnsHeight",
			".columnHeaders.width",
			".rowHeaders.width",
			".rowHeaders.height",
			"rowHeaders",
			".columns.",
			"sizes.leaves",
			"orderedChildrenIds",
			"measureHeadersAxis",
			"measureHeadersLocation",
			"Dimension",
			"dimension",
			"Measure",
			"measure",
			"TOGGLE_MEASURE",
			"MOVE_DIMENSION",
			"TOGGLE_MEASURES",
			"SET_MEASURES",
			"SET_DIMENSIONS",
			"hgw",
			"t[`dbh]",
			"db_",
			"db[`db_version_step]",
			"db_version_step",
			"BOOKV2,",
			",BOO_",
			",MKP_",
			"BOOKV3,",
			".pos.d_ref",
			".pos.d_mo",
			"",
			".z_stm.b_trans",
			".z_trs.b_trans",
			".z_trs.l.b_trans",
			"\t",
			"",
			".z_msg.f.post_msg[`project`cd_mod`spec!``tp`",
			"(1=2)",
			"(=1)",
			"not[.Q.qt[v]]",
			".Q.qt[v]",
			"n_",
			"qp_",
			"dc",
			".d_get_zp.",
			"d_evt",
			"f",
			"f.post",
			"oo[`obj][`t]",
			"oo[`obj][`fi]",
			"oo[`sim][`scens]",
			"oo[`sim][`scen]",
			"oo[`sim][`simul]",
			"oo[`q][`p]",
			"oo[`sim][`zp_simul]",
			"oo[`sim][`zp]",
			"oo[`q][`w]",
			"oo[`q][`cby]",
			"oo[`q][`gby]",
			"oo[`q][`ids]",
			"oo[`q][`x]",
			"oo[`q][`c]",
			"oo[`obj][`bd]",
			"oo[`obj][`tp]",
			"oo[`obj][`pk]",
			"proj",
			"til 6",
			"",
			".mkv.FX",
			".mkv.fx",
			"lg_id_dic",
			"[p;msg]",
			"",
			"f.p.exec",
			"f.p.query_diff",
			"b_chg_sp_",
			"b_chg_sp",
			"`zps",
			"before_measure",
			"after_measure",
			".z_cub.f.fxc",
			".z_cub.f.px_mkt",
			".z_cub.f.disc",
			".z_cub.f.rsk",
			".z_cub.f.dcf",
			"b_upd_ctx",
			"subscription",
			"`project`cd_mod",
			"1-system_manager",
			"`qfact_var"
		],
		"reverse": false,
		"show_context": false,
		"use_buffer2": false,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/pivotGrid/components/DataCells/DataCells.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15172,
						"regions":
						{
						},
						"selection":
						[
							[
								11902,
								11902
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										11924,
										11925
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										11901,
										11902
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6016.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/pivotGrid/selectors/headers.selector.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8864,
						"regions":
						{
						},
						"selection":
						[
							[
								7952,
								7952
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4272.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/pivotGrid/actions/selection.action.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 430,
						"regions":
						{
						},
						"selection":
						[
							[
								422,
								422
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										424,
										425
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										373,
										374
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/pivotGrid/components/PivotGrid/PivotGrid.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17257,
						"regions":
						{
						},
						"selection":
						[
							[
								8440,
								8445
							],
							[
								8459,
								8464
							],
							[
								8483,
								8488
							],
							[
								8510,
								8515
							],
							[
								8550,
								8555
							],
							[
								8576,
								8581
							],
							[
								8631,
								8636
							],
							[
								8665,
								8670
							],
							[
								8707,
								8712
							],
							[
								8746,
								8751
							],
							[
								8806,
								8811
							],
							[
								8843,
								8848
							],
							[
								8882,
								8887
							],
							[
								8918,
								8923
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2711.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/pivotGrid/containers/PivotGrid.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2270,
						"regions":
						{
						},
						"selection":
						[
							[
								1481,
								1481
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1730,
										1731
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										1007,
										1008
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 432.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/pivotGrid/constants/index.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2196,
						"regions":
						{
						},
						"selection":
						[
							[
								911,
								911
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										912,
										913
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										871,
										872
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 480.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/pivotGrid/reducers/selection.reducer.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 862,
						"regions":
						{
						},
						"selection":
						[
							[
								736,
								736
							],
							[
								770,
								770
							],
							[
								785,
								785
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										744,
										745
									],
									"2":
									[
										785,
										786
									],
									"3":
									[
										785,
										786
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									],
									"2":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									],
									"3":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										721,
										722
									],
									"2":
									[
										745,
										746
									],
									"3":
									[
										745,
										746
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/pivotGrid/components/DataCell/DataCell.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2170,
						"regions":
						{
						},
						"selection":
						[
							[
								857,
								857
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										862,
										863
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										706,
										707
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 240.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/pivotGrid/components/DataCells/ScrollBar.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6575,
						"regions":
						{
						},
						"selection":
						[
							[
								3810,
								3810
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										3910,
										3911
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										3807,
										3808
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 720.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 50.0
	},
	"input":
	{
		"height": 43.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 635.0
	},
	"output.find_results":
	{
		"height": 189.0
	},
	"output.unsaved_changes":
	{
		"height": 358.0
	},
	"pinned_build_system": "",
	"project": "grid.sublime-project",
	"replace":
	{
		"height": 80.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"pivot",
				"src\\pivotGrid\\containers\\PivotGrid.js"
			],
			[
				"pivotgrid",
				"src\\pivotGrid\\components\\PivotGrid\\PivotGrid.js"
			],
			[
				"selectred",
				"src\\pivotGrid\\reducers\\selection.reducer.js"
			],
			[
				"constan",
				"src\\pivotGrid\\constants\\index.js"
			],
			[
				"select",
				"src\\pivotGrid\\actions\\selection.action.js"
			],
			[
				"header.select",
				"src\\pivotGrid\\selectors\\headers.selector.js"
			],
			[
				"datacell",
				"src\\pivotGrid\\components\\DataCell\\DataCell.js"
			],
			[
				"scrollbar",
				"src\\pivotGrid\\components\\DataCells\\ScrollBar.js"
			],
			[
				"datacells",
				"src\\pivotGrid\\components\\DataCells\\DataCells.js"
			],
			[
				"headersel",
				"src\\pivotGrid\\selectors\\headers.selector.js"
			],
			[
				"headers",
				"src\\pivotGrid\\components\\Headers\\Headers.js"
			],
			[
				"collred",
				"src\\pivotGrid\\reducers\\collapses.reducer.js"
			],
			[
				"pivotgridde",
				"src\\PivotGrid.demo.js"
			],
			[
				"dimension",
				"src\\pivotGrid\\containers\\DimensionHeaders.js"
			],
			[
				"rowheaders",
				"src\\pivotGrid\\containers\\RowHeaders.js"
			],
			[
				"columnh",
				"src\\pivotGrid\\containers\\ColumnHeaders.js"
			],
			[
				"",
				"src\\pivotGrid\\components\\PivotGrid\\PivotGrid.js"
			],
			[
				"mock",
				"src\\utils\\mock.js"
			],
			[
				"ivotgrid",
				"src\\PivotGrid.demo.js"
			],
			[
				"axissel",
				"src\\pivotGrid\\selectors\\axis.selector.js"
			],
			[
				"header",
				"src\\pivotGrid\\components\\Header\\Header.js"
			],
			[
				"columnheader",
				"src\\pivotGrid\\containers\\ColumnHeaders.js"
			],
			[
				"collapseact",
				"src\\pivotGrid\\actions\\collapses.action.js"
			],
			[
				"dimhea",
				"src\\pivotGrid\\containers\\DimensionHeaders.js"
			],
			[
				"rowh",
				"src\\pivotGrid\\containers\\RowHeaders.js"
			],
			[
				"collac",
				"src\\pivotGrid\\actions\\collapses.action.js"
			],
			[
				"coll",
				"src\\pivotGrid\\reducers\\collapses.reducer.js"
			],
			[
				"col",
				"src\\pivotGrid\\containers\\ColumnHeaders.js"
			],
			[
				"sizesel",
				"src\\pivotGrid\\selectors\\sizes.selector.js"
			],
			[
				"headsel",
				"src\\pivotGrid\\selectors\\headers.selector.js"
			],
			[
				"inner",
				"src\\pivotGrid\\components\\InnerHeader\\InnerHeader.js"
			],
			[
				"axis",
				"src\\pivotGrid\\selectors\\axis.selector.js"
			],
			[
				"ro",
				"src\\pivotGrid\\containers\\RowHeaders.js"
			],
			[
				"headerssel",
				"src\\pivotGrid\\selectors\\headers.selector.js"
			],
			[
				"dimen",
				"src\\pivotGrid\\components\\DimensionHeader\\DimensionHeader.js"
			],
			[
				"dime",
				"src\\pivotGrid\\components\\DimensionHeaders\\DimensionHeaders.js"
			],
			[
				"dim",
				"src\\pivotGrid\\containers\\DimensionHeaders.js"
			],
			[
				"size",
				"src\\pivotGrid\\selectors\\sizes.selector.js"
			],
			[
				"data",
				"src\\pivotGrid\\containers\\DataCells.js"
			],
			[
				"axisselec",
				"src\\pivotGrid\\selectors\\axis.selector.js"
			],
			[
				"innerheader",
				"src\\pivotGrid\\components\\InnerHeader\\InnerHeader.js"
			],
			[
				"axis.selector",
				"src\\pivotGrid\\selectors\\axis.selector.js"
			],
			[
				"demo",
				"src\\PivotGrid.demo.js"
			],
			[
				"axisselector",
				"src\\pivotGrid\\selectors\\axis.selector.js"
			],
			[
				"resizeh",
				"src\\pivotGrid\\components\\ResizeHandle\\ResizeHandle.js"
			],
			[
				"scroll",
				"src\\pivotGrid\\components\\DataCells\\ScrollBar.js"
			],
			[
				"dimehead",
				"src\\pivotGrid\\components\\DimensionHeader\\DimensionHeader.js"
			],
			[
				"pivotgr",
				"src\\pivotGrid\\containers\\PivotGrid.js"
			],
			[
				"selection",
				"src\\pivotGrid\\selectors\\selection.selector.js"
			],
			[
				"filter",
				"src\\pivotGrid\\components\\Filter\\Filter.js"
			],
			[
				"context",
				"src\\pivotGrid\\components\\ContextMenu\\ContextMenu.js"
			],
			[
				"column",
				"src\\pivotGrid\\containers\\ColumnHeaders.js"
			],
			[
				"axisselect",
				"src\\pivotGrid\\selectors\\axis.selector.js"
			],
			[
				"dimensions",
				"src\\pivotGrid\\selectors\\dimensions.selector.js"
			],
			[
				"rowheader",
				"src\\pivotGrid\\containers\\RowHeaders.js"
			],
			[
				"datc",
				"src\\pivotGrid\\containers\\DataCells.js"
			],
			[
				"axis.select",
				"src\\pivotGrid\\selectors\\axis.selector.js"
			],
			[
				"innerh",
				"src\\pivotGrid\\components\\InnerHeader\\InnerHeader.js"
			],
			[
				"row",
				"src\\pivotGrid\\containers\\RowHeaders.js"
			],
			[
				"dimh",
				"src\\pivotGrid\\components\\DimensionHeaders\\DimensionHeaders.js"
			],
			[
				"headersele",
				"src\\pivotGrid\\selectors\\headers.selector.js"
			],
			[
				"sizesele",
				"src\\pivotGrid\\selectors\\sizes.selector.js"
			],
			[
				"aggre",
				"src\\pivotGrid\\utils\\aggregation.js"
			],
			[
				"filtering",
				"src\\pivotGrid\\utils\\filtering.js"
			],
			[
				"dat",
				"src\\pivotGrid\\selectors\\data.selector.js"
			],
			[
				"data.",
				"src\\pivotGrid\\reducers\\data.reducer.js"
			],
			[
				"zebulon",
				"src\\pivotGrid\\ZebulonGrid.js"
			],
			[
				"sizea",
				"src\\pivotGrid\\actions\\sizes.action.js"
			],
			[
				"contextme",
				"src\\pivotGrid\\components\\ContextMenu\\ContextMenu.js"
			],
			[
				"zeb",
				"src\\pivotGrid\\ZebulonGrid.js"
			],
			[
				"axisre",
				"src\\pivotGrid\\reducers\\axis.reducer.js"
			],
			[
				"pivotg",
				"src\\pivotGrid\\components\\PivotGrid\\PivotGrid.js"
			],
			[
				"dimensionsel",
				"src\\pivotGrid\\selectors\\dimensions.selector.js"
			],
			[
				"configred",
				"src\\pivotGrid\\reducers\\config.reducer.js"
			],
			[
				"co",
				"src\\pivotGrid\\utils\\configuration.js"
			],
			[
				"dem",
				"src\\PivotGrid.demo.js"
			],
			[
				"confi",
				"src\\pivotGrid\\utils\\configuration.js"
			],
			[
				"z",
				"src\\ZebulonGrid.demo.js"
			],
			[
				"config",
				"src\\pivotGrid\\utils\\configuration.js"
			],
			[
				"pivit",
				"src\\pivotGrid\\components\\PivotGrid\\PivotGrid.js"
			],
			[
				"configuration",
				"src\\pivotGrid\\utils\\configuration.js"
			],
			[
				"zebu",
				"src\\pivotGrid\\ZebulonGrid.js"
			],
			[
				"gen",
				"src\\pivotGrid\\utils\\generic.js"
			],
			[
				"con",
				"src\\pivotGrid\\utils\\configuration.js"
			],
			[
				"generic",
				"src\\pivotGrid\\utils\\generic.js"
			],
			[
				"pi",
				"src\\pivotGrid\\containers\\PivotGrid.js"
			],
			[
				"pivotgriddemo",
				"src\\PivotGrid.demo.js"
			],
			[
				"configu",
				"src\\pivotGrid\\utils\\configuration.js"
			],
			[
				"draglay",
				"src\\pivotGrid\\components\\PivotGrid\\DragLayer.js"
			],
			[
				"conte",
				"src\\pivotGrid\\components\\ContextMenu\\ContextMenu.js"
			],
			[
				"pivotgridem",
				"src\\PivotGrid.demo.js"
			],
			[
				"head",
				"src\\pivotGrid\\components\\Header\\Header.js"
			],
			[
				"index",
				"src\\pivotGrid\\index.css"
			],
			[
				"datace",
				"src\\pivotGrid\\components\\DataCells\\DataCells.js"
			],
			[
				"datacel",
				"src\\pivotGrid\\components\\DataCell\\DataCell.js"
			],
			[
				"da",
				"src\\pivotGrid\\components\\DataCells\\DataCells.js"
			],
			[
				"datac",
				"src\\pivotGrid\\components\\DataCells\\DataCells.js"
			],
			[
				"datase",
				"src\\pivotGrid\\selectors\\data.selector.js"
			],
			[
				"moc",
				"src\\utils\\mock.js"
			],
			[
				"exte",
				"src\\utils\\externalFunctions.js"
			],
			[
				"compdatacells",
				"src\\pivotGrid\\components\\DataCells\\DataCells.js"
			],
			[
				"setconfig",
				"src\\pivotGrid\\utils\\setConfig.js"
			],
			[
				"contextmenu",
				"src\\pivotGrid\\components\\ContextMenu\\ContextMenu.js"
			],
			[
				"seconfig",
				"src\\pivotGrid\\utils\\setConfig.js"
			],
			[
				"setc",
				"src\\pivotGrid\\utils\\setConfig.js"
			],
			[
				"set",
				"src\\pivotGrid\\utils\\setConfig.js"
			],
			[
				"app",
				"src\\App.js"
			],
			[
				"inde",
				"src\\pivotGrid\\index.js"
			],
			[
				"packa",
				"package.json"
			],
			[
				"wrap",
				"src\\pivotGrid\\WrappedGrid.js"
			],
			[
				"confg",
				"src\\pivotGrid\\actions\\config.action.js"
			],
			[
				"dimenact",
				"src\\pivotGrid\\actions\\dimension.action.js"
			],
			[
				"setco",
				"src\\pivotGrid\\setConfig.js"
			],
			[
				"se",
				"src\\pivotGrid\\reducers\\selection.reducer.js"
			],
			[
				"wrapp",
				"src\\pivotGrid\\WrappedGrid.js"
			],
			[
				"selectionsel",
				"src\\pivotGrid\\selectors\\selection.selector.js"
			],
			[
				"hydratestore",
				"src\\pivotGrid\\hydrateStore.js"
			],
			[
				"exter",
				"src\\utils\\externalFunctions.js"
			],
			[
				"dimhead",
				"src\\pivotGrid\\components\\DimensionHeader\\DimensionHeader.js"
			],
			[
				"dimheader",
				"src\\pivotGrid\\containers\\DimensionHeaders.js"
			],
			[
				"hydr",
				"src\\pivotGrid\\hydrateStore.js"
			],
			[
				"ivotgris",
				"src\\PivotGrid.demo.js"
			],
			[
				"pivo",
				"src\\PivotGrid.demo.js"
			],
			[
				"dimheads",
				"src\\pivotGrid\\components\\DimensionHeaders\\DimensionHeaders.js"
			],
			[
				"colla",
				"src\\pivotGrid\\actions\\collapses.action.js"
			],
			[
				"colare",
				"src\\pivotGrid\\reducers\\collapses.reducer.js"
			],
			[
				"collapsred",
				"src\\pivotGrid\\reducers\\collapses.reducer.js"
			],
			[
				"formats",
				"src\\utils\\Format.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 625.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"C:\\Users\\thomas\\dev\\dev.sublime-project"
			]
		],
		"width": 475.0
	},
	"select_symbol":
	{
		"height": 490.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"fsy",
				"f.sync"
			],
			[
				"ffcs",
				"f.fcsv_to_tbl"
			],
			[
				"loadt",
				"f.p.load_tables"
			],
			[
				"f.msg_end",
				"f.msg_end"
			],
			[
				"f.exec",
				"f.exec"
			],
			[
				"fpostex",
				"f.post_exec"
			],
			[
				"fposte",
				"f.post_evt"
			],
			[
				"subs",
				"f.subscribe"
			],
			[
				"fqtc",
				"f.qtc"
			],
			[
				"defd",
				"f.p.define_deployement"
			],
			[
				"initn",
				"f.p.init_nod"
			],
			[
				"fcx",
				"f.cx"
			],
			[
				"floadn",
				"f.load_nod"
			],
			[
				"fm",
				"f.b_month"
			],
			[
				"fpco",
				"f.post_config"
			],
			[
				"sysmcx",
				"z_nm.sysm.cx"
			],
			[
				"f.posc",
				"f.post_config"
			],
			[
				"blode",
				"z_nod.b_loaded"
			],
			[
				"postc",
				"f.post_config"
			],
			[
				"loadp",
				"f.load_project"
			],
			[
				"bhow",
				"z_nod.b_show"
			],
			[
				"initenv",
				"f.init_env"
			],
			[
				"z_smh",
				"z_nm.sysm.l.h"
			],
			[
				"fclo",
				"f.close"
			],
			[
				"asserttref",
				"assert.remoteFail"
			],
			[
				"init",
				"f.init"
			],
			[
				"faddl",
				"f.add_ln"
			],
			[
				"fpstm",
				"f.post_msg"
			],
			[
				"fconfgn",
				"f.config_nod"
			],
			[
				"fcfgn",
				"f.config_nod"
			],
			[
				"f_upd_cald",
				"f_upd_cald"
			],
			[
				"fpost",
				"f_post_msg"
			],
			[
				"fmsg",
				"f_msg"
			],
			[
				"",
				"ACC_ID_ARE"
			],
			[
				"fcsvt",
				"f_csv_to_tbl"
			],
			[
				"flode",
				"f_load_env"
			],
			[
				"ho",
				"home"
			],
			[
				"hom",
				"zeb_nod.home"
			],
			[
				"flotbl",
				"zeb_nod_mng.f_load_tbls"
			],
			[
				"fcre",
				"f_create_nod"
			],
			[
				"fgetseq",
				"f_get_seq"
			],
			[
				"f_init",
				"f_init"
			],
			[
				"finit",
				"f_init"
			],
			[
				"finite",
				"f_init_env"
			],
			[
				"fop",
				"f_open_instance"
			],
			[
				"ftry",
				"f_try_catch"
			],
			[
				"fsleep",
				"f_sleep"
			],
			[
				"fopeni",
				"f_open_instance"
			],
			[
				"f_save",
				"f_save"
			],
			[
				"zebobob",
				"zeb_obj.obj"
			],
			[
				"finito",
				"f_init_obj"
			],
			[
				"fdef",
				"f_default_params"
			],
			[
				"fl",
				"f_l"
			],
			[
				"fhasc",
				"f_has_chg"
			],
			[
				"fset",
				"f_set"
			],
			[
				"fass",
				"f_assign_seq"
			],
			[
				"fg",
				"f_g"
			],
			[
				"f_get",
				"f_get"
			],
			[
				"fmdea",
				"f_msg_dea"
			],
			[
				"fmsgd",
				"f_err_msg_id"
			],
			[
				"faddh",
				"f_add_h"
			],
			[
				"fproj",
				"f_proj"
			],
			[
				"fcsv",
				"f_csv_to_tbl"
			],
			[
				"f_tbl_to_csv",
				"f_tbl_to_csv"
			],
			[
				"finitd",
				"f_init_dt"
			],
			[
				"env",
				"env_mac"
			],
			[
				"fload",
				"f_load_quo"
			],
			[
				"f_discard_o_rdb",
				"f_discard_o_rdb"
			],
			[
				"fs",
				"f_s"
			],
			[
				"fopein",
				"f_open_instance"
			],
			[
				"fpa",
				"f_parse"
			],
			[
				"faver",
				"f_average"
			],
			[
				"f_fmt",
				"f_fmt"
			],
			[
				"fln",
				"f_ln"
			],
			[
				"finitdt",
				"f_init_dt"
			],
			[
				"ftspd",
				"z_dt.f_ts_pd_nth"
			],
			[
				"f_unit",
				"f_unit"
			],
			[
				"finenv",
				"f_init_env"
			],
			[
				"floadfr",
				"f_load_framework"
			],
			[
				"fsrcp",
				"zeb_env.f_src_path"
			]
		],
		"width": 490.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 385.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
